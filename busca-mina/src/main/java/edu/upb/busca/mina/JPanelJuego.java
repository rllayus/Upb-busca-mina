/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package edu.upb.busca.mina;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 *
 * @author rlaredo
 */
public class JPanelJuego extends javax.swing.JPanel implements MouseListener {

    private final int cantidadFila = 10;
    private final int cantidadColumna = 10;

    /**
     * Creates new form JPanelJuego
     */
    public JPanelJuego() {
        initComponents();
        this.addMouseListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 596, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 443, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        dibujarTablero(g);
    }

    private void dibujarTablero(Graphics g) {

        int anchoTablero = getWidth();
        int altoTablero = getHeight();

        // Calcular el tamaño de cada celda para que sea cuadrada y se ajuste al panel
        int tamanioCelda = Math.min(anchoTablero / cantidadColumna, altoTablero / cantidadFila);

        // Dibujar las celdas
        for (int fila = 0; fila < cantidadFila; fila++) {
            for (int columna = 0; columna < cantidadColumna; columna++) {
                // Calcular las coordenadas de la celda actual
                int x = columna * tamanioCelda;
                int y = fila * tamanioCelda;

                // Dibujar el borde de la celda
                g.setColor(Color.GRAY); // Color del borde
                g.drawRect(x, y, tamanioCelda, tamanioCelda);

                // Rellenar la celda con un color de fondo
                g.setColor(Color.LIGHT_GRAY); // Color del fondo de la celda
                g.fillRect(x + 1, y + 1, tamanioCelda - 1, tamanioCelda - 1);
            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {

    }

    @Override
    public void mousePressed(MouseEvent e) {

    }

    @Override
    public void mouseReleased(MouseEvent e) {
        if (SwingUtilities.isLeftMouseButton(e) || SwingUtilities.isRightMouseButton(e)) {
            System.out.println("Click");
            // Calcular el tamaño de la celda, igual que en el método dibujarTablero()
            int tamanioCelda = Math.min(getWidth() / cantidadColumna, getHeight() / cantidadFila);

            // Obtener las coordenadas X e Y del clic
            int x = e.getX();
            int y = e.getY();
            System.out.println("Click");
            // Validar que el clic esté dentro del área del tablero
            if (x >= 0 && x < cantidadColumna * tamanioCelda && y >= 0 && y < cantidadFila * tamanioCelda) {
                System.out.println("Click X Y");
                // Calcular la fila y la columna de la celda clickeada
                int fila = y / tamanioCelda;
                int columna = x / tamanioCelda;

                // Aquí iría la lógica del juego. Por ejemplo, revelar la celda.
                // Por ahora, solo mostraremos un mensaje.
                JOptionPane.showMessageDialog(null, "Celda clickeada: Fila: " + fila + ", Columna: " + columna, "Info", JOptionPane.INFORMATION_MESSAGE);

                // Repintar el tablero para reflejar los cambios (si los hubiera)
                repaint();
            }
        }
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

}
